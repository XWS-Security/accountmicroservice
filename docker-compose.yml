version: "3.8"

services:

  accountmicroservice:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appWebServerRuntime}
    image: lukadoric/accountmicroservice
    container_name: accountmicroservice
    restart: on-failure
    networks:
      - nistagram-network
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      FOLLOWER_MICROSERVICE: ${FOLLOWER_MICROSERVICE}
    depends_on: 
      - postgres
      
  followermicroservice:
    build:
      context: followermicroservice/.
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appWebServerRuntime}
    image: lukadoric/followermicroservice
    container_name: followermicroservice
    restart: on-failure
    networks:
      - nistagram-network
    environment:
      NEO4J_DRIVER_URI: bolt://neo4j:7687
      NEO4J_PASSWORD: super
    depends_on: 
      - neo4j
      
  contentmicroservice:
    build:
      context: contentmicroservice/.
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appWebServerRuntime}
    image: lukadoric/contentmicroservice
    container_name: contentmicroservice
    restart: on-failure
    networks:
      - nistagram-network
    environment:
      NEO4J_DRIVER_URI: bolt://neo4j:7687
      NEO4J_PASSWORD: super
    depends_on: 
      - neo4j
      
  neo4j:
    image: neo4j:4.1.3
    container_name: neo4j
    hostname: neo4j
    restart: on-failure
    volumes:
      - /opt/neo4j/data/conf:/conf
      - /opt/neo4j/data/data:/data
      - /opt/neo4j/data/import:/import
      - /opt/neo4j/data/logs:/logsneo4j
    environment:
      NEO4J_AUTH: none
    networks:
      - nistagram-network
    ports:
      - 7687:7687 # Bolt
      - 7473:7473 # HTTPS
      - 7474:7474 # HTTP
      
  gateway:
    image: lukadoric/nistagram-front
    ports:
      - 8080:8080
    networks:
      - nistagram-network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    
  postgres:
    image: postgres:${POSTGRES_VERSION-13}
    container_name: postgres
    restart: always
    networks:
      - nistagram-network
    expose:
      - 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

networks:
  nistagram-network:
    name: nistagram-network
    driver: bridge
